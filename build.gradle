buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://plugins.gradle.org/m2" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.0.10"
        classpath "org.grails.plugins:hibernate5:7.0.4"
        classpath "io.github.gradle-nexus:publish-plugin:1.0.0"
    }
}

group "io.github.gpc"

apply plugin:"eclipse"
apply plugin: 'idea'
apply plugin:"org.grails.grails-plugin"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin: "maven-publish"
apply plugin: "signing"
apply plugin: "io.github.gradle-nexus.publish-plugin"

repositories {
    maven { url "https://repo.grails.org/grails/core" }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.4.18.Final"
    compile "org.grails.plugins:mongodb"
    compile "org.grails.plugins:gsp"
    compile "org.grails.plugins:mail:3.0.0"
    // This is needed for the quartz-plugin on grails 4.0.x, https://github.com/grails-plugins/grails-quartz/issues/107#issuecomment-575951471
    compile("org.quartz-scheduler:quartz:2.2.3") {
        exclude group: 'slf4j-api', module: 'c3p0'
    }
    compile ('org.grails.plugins:quartz:2.0.13')
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:3.0.10"
    testCompile "io.micronaut:micronaut-inject-groovy"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.mockito:mockito-core"
    testCompile "org.grails:grails-web-testing-support"
}

bootRun {
    ignoreExitValue true
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-noverify',
            '-XX:TieredStopAtLevel=1',
            '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}


tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}
// enable if you wish to package this plugin as a standalone application
bootJar.enabled = false

assets {
    packagePlugin = true
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = 'asynchronous-mail'
            version = project.version

            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'Grails Asynchronous Mail Plugin'
                description = 'The plugin realises asynchronous mail sending. It stores messages in a DB and sends them asynchronously by a quartz job.'
                url = 'https://github.com/gpc/grails-asynchronous-mail'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'kefirfromperm'
                        name = 'Vitalii Samolovskikh'
                    }
                    developer {
                        id = 'stokito'
                        name = 'Sergey Ponomarev'
                    }
                    developer {
                        id = 'ilopmar'
                        name = 'Iván López'
                    }
                    developer {
                        id = 'burtbeckwith'
                        name = 'Burt Beckwith'
                    }
                    developer {
                        id = 'puneetbehl'
                        name = 'Puneet Behl'
                    }
                    developer {
                        id = 'aberbenni'
                        name = 'Alessandro Berbenni'
                    }
                    developer {
                        id = 'dpcasady'
                        name = 'Danny Casady'
                    }
                    developer {
                        id = 'SAgrawal14'
                        name = 'Shashank Agrawal'
                    }
                    developer {
                        id = 'visheshd'
                        name = 'Vishesh'
                    }
                    developer {
                        id = 'micke-a'
                        name = 'Mikael Andersson'
                    }
                    developer {
                        id = 'pgdoval'
                        name = 'Pablo González Doval'
                    }
                    developer {
                        id = 'Uniqen'
                        name = 'Magnus Dalin'
                    }
                    developer {
                        id = 'demon101'
                        name = 'Demon'
                    }
                    developer {
                        id = 'matrei'
                        name = 'Mattias Reichel'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/gpc/grails-asynchronous-mail.git'
                    developerConnection = 'scm:git:ssh://github.com:gpc/grails-asynchronous-mail.git'
                    url = 'https://github.com/gpc/grails-asynchronous-mail'
                }
            }
        }
    }
}

ext."signing.keyId" = project.findProperty('signing.keyId') ?: System.getenv('SIGNING_KEY_ID')
ext."signing.password" = project.findProperty('signing.password') ?: System.getenv('SIGNING_PASSPHRASE')
ext."signing.secretKeyRingFile" = project.findProperty('signing.secretKeyRingFile') ?: (System.getenv('SIGNING_PASSPHRASE') ?: "${System.getProperty('user.home')}/.gnupg/secring.gpg")

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

afterEvaluate {
    signing {
        required { isReleaseVersion }
        sign publishing.publications.maven
    }
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

nexusPublishing {
    repositories {
        sonatype {
            def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.findProperty('sonatypeOss2Username') ?: ''
            def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.findProperty("sonatypeOss2Password") ?: ''
            def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.findProperty("sonatypeOssStagingProfileIdJms") ?: ''

            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            username = ossUser
            password = ossPass
            stagingProfileId = ossStagingProfileId
        }
    }
}

task snapshotVersion {
    doLast {
        if(!project.version.endsWith('-SNAPSHOT')) {
            ant.propertyfile(file: "gradle.properties") {
                entry(key: "version", value: "${project.version}-SNAPSHOT")
            }
        }
    }
}
