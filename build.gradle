buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.2"
        classpath "com.gorylenko.gradle-git-properties:com.gorylenko.gradle-git-properties.gradle.plugin:1.5.2"
    }
}

version "2.0.3"
group "org.grails.plugins"


apply plugin: 'idea'
apply plugin:"org.grails.grails-plugin"
apply plugin:"org.grails.grails-plugin-publish"
apply plugin:"org.grails.grails-gsp"
apply plugin:"asset-pipeline"
apply plugin: "com.gorylenko.gradle-git-properties"
apply plugin: 'maven-publish'

ext {
    grailsVersion = project.grailsVersion
    gradleWrapperVersion = project.gradleWrapperVersion
}

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:scaffolding"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    provided "org.grails:grails-plugin-services"
    provided "org.grails:grails-plugin-domain-class"

    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "net.bytebuddy:byte-buddy:1.7.9"
    testCompile "org.grails.plugins:hibernate5"
    testCompile "com.h2database:h2:1.4.196"

    compile "org.grails.plugins:mail:2.0.0"
    compile "org.grails.plugins:quartz:2.0.13"
}

assets {
    packagePlugin = true
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task packageJavadoc(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

task packageGroovydoc(type: Jar) {
    from groovydoc
    classifier = 'groovydoc'
}


gitProperties {
    keys = ['git.branch', 'git.commit.id', 'git.commit.time', 'git.commit.id.abbrev']
    failOnNoGitDirectory = true
    extProperty = 'gitProps' // git properties will be put in a map at project.ext.gitProps
}

generateGitProperties.outputs.upToDateWhen { false } // make sure the generateGitProperties task always executes (even when git.properties is not changed)

jar {
    dependsOn generateGitProperties
    manifest {
        attributes("Built-By": System.getProperty("user.name"))
        attributes(["Plugin-Version"        : version,
                    "Plugin-Title"          : project.name,
                    "Plugin-Build-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "Git-Commit"            : "${-> project.ext.gitProps['git.commit.id.abbrev']}",
                    "Git-Branch"            : "${-> project.ext.gitProps['git.branch']}"])
    }
    from sourceSets.main.output
    exclude 'git.properties'
}

grailsPublish {
    userOrg = 'kefirsf'
    license {
        name = 'Apache-2.0'
    }
    websiteUrl = 'https://grails.org/plugins.html#plugin/asynchronous-mail'
    issueTrackerUrl = 'https://github.com/kefirfromperm/grails-asynchronous-mail/issues'
    vcsUrl = 'https://github.com/kefirfromperm/grails-asynchronous-mail.git'
    title = "Grails Asynchronous Mail plugin"
    desc = "The plugin realises asynchronous mail sending. It stores messages in a DB and sends them asynchronously by a quartz job."
    developers = [
            kefirfromperm: "Vitalii Samolovskikh",
            stokito      : "Sergey Ponomarev",
            ilopmar      : "Iván López",
            burtbeckwith : "Burt Beckwith",
            puneetbehl   : "Puneet Behl",
            aberbenni    : "Alessandro Berbenni",
            dpcasady     : "Danny Casady",
            SAgrawal14   : "Shashank Agrawal",
            visheshd     : "Vishesh",
            'micke-a'    : "Mikael Andersson",
            pgdoval      : "Pablo González Doval",
            Uniqen       : "Magnus Dalin",
            demon101     : "Demon",
            vsachinv     : "Sachin Verma"
    ]
}


javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath
    options
            {
                setMemberLevel JavadocMemberLevel.PUBLIC
                setAuthor true

                links "https://docs.oracle.com/javase/8/docs/api/"
            }
}


publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/gpc/grails-asynchronous-mail"
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            pom.withXml {
                def pomNode = asNode()
                pomNode.dependencyManagement.replaceNode {}

                // simply remove dependencies without a version
                // version-less dependencies are handled with dependencyManagement
                // see https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/8 for more complete solutions
                pomNode.dependencies.dependency.findAll {
                    it.version.text().isEmpty()
                }.each {
                    it.replaceNode {}
                }
            }
            from components.java
            artifact sourceJar
            artifact packageJavadoc
            artifact packageGroovydoc
        }
    }
}